#include<stdio.h>
#include"tree_class.hh"
#include"stdlib.h"

using namespace std;
int tree::read_node_values(int **ret_buffer, const char *filename)
{
 
     FILE *fp;
     char c;
     int *buffer;
     int i;
     int node_count;
     fp = fopen(filename, "r");
     if(fp == NULL){
         return -1;
     }
     fseek(fp, SEEK_SET, 0);
 
     buffer = (int *)malloc(sizeof(int));
 
     i = 0;
     while(1){
         c = fgetc(fp);
         if(feof(fp)){
             break;
         }
         if(c != '\n'){
             buffer[i] = c-'0';
             i++;
             buffer = (int *)realloc(buffer, (i+1)*sizeof(int));
         }
      }
      buffer[i] = -1;
      node_count = i;
      *ret_buffer = buffer;
      fclose(fp);
      return node_count;
}

int tree::create_binary_tree(node_t **ret_node, int **head, int *buffer, int node_count){
    printf("Creaing the binary tree\n");
    node_t n;
    int buffer_index = 0;
    n.data = buffer[0];
    buffer_index++;
    while(buffer_index < node_count){
	if(buffer[1] < buffer[0]){
	    printf("This function is currently not being used. Data assigned to node n is: %d\n", n.data);
	}
    }
    return 0;
}

int tree::insert_node(node_t *parent, node_t **child, int value){
    node_t *temp_node;
    temp_node = (node_t *)malloc(sizeof(node_t));
    temp_node->data = value;
    temp_node->parent = parent;
    temp_node->left = NULL;
    temp_node->right = NULL;
    *child = temp_node;
    return 0;
}

int tree::traverseLeft(node_t **parent, int value, node_t **child){
    if(*child == NULL){
	insert_node(*parent,child,value);
	node_t *temp = *parent;
	temp->left = *child;
	*parent = temp;
	printf("Child allocated value\n");
    }else{
	node_t *temp_child = *child;
	if(value <= temp_child->data){
	    traverseLeft(child,value,&(temp_child->left));
	}else if(value > temp_child->data){
	    traverseRight(child,value,&(temp_child->right));
	}
	*child = temp_child;
    }
    return 0;
}

int tree::traverseRight(node_t **parent, int value, node_t **child){
    if(*child == NULL){
	insert_node(*parent,child,value);
	node_t *temp = *parent;
	temp->right = *child;
	*parent = temp;
    }else{
	node_t *temp_child = *child;
	if(value <= temp_child->data){
	    traverseLeft(child,value,&(temp_child->left));
	}else if(value > temp_child->data){
	    traverseRight(child,value,&(temp_child->right));
	}
	*child = temp_child;
    }
    return 0;
}

int tree::searchValue(node_t *node, int value, node_t **dest_node_addr, int depth){
    if(node->data == value){
	*dest_node_addr = node;
    }else{
	depth++;
	printf("node->data: %d value: %d\n", node->data, value);
	if((node->data > value)&&(node->left != NULL)){
	    depth = searchValue(node->left, value, dest_node_addr,depth);
	}else if((node->data < value)&&(node->right != NULL)){
	    depth = searchValue(node->right, value, dest_node_addr,depth);
	}else{
	    printf("Value not found node->left->data: %d\n", node->left->data);
	    return -1;
	}
    }
    return depth;
}

int tree::preorder(node_t *n, int **buffer, int index){
    int *tmp_buffer = *buffer;
    int ret_index = index;
    if(n->left != NULL){
	index++;
	ret_index++;
	tmp_buffer = (int *)realloc(tmp_buffer,(index+1)*(sizeof(int)));
        tmp_buffer[index] = n->left->data;
	*buffer = tmp_buffer;
	ret_index = preorder(n->left,buffer,index);
    }
    index = ret_index;
    if(n->right != NULL){
	index++;
	ret_index++;
        tmp_buffer = (int *)realloc(tmp_buffer,(index+1)*(sizeof(int)));
        tmp_buffer[index] = n->right->data;
        *buffer = tmp_buffer;
        ret_index = preorder(n->right,buffer,index);
    }
    index = ret_index;
    return index;
}


